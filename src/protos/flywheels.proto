syntax = "proto3";

import "nanopb.proto";

/*************************************************/
/******** Main messages that will be sent ********/
/*************************************************/

message FlywheelConfig
{
    int32 numMotors = 1;

    MotorControlMethod controlMethod = 2;
    DshotModes dshotMode = 3;
    TelemMethod telemetryMethod = 4;
    // A pin that allows us to shut off power to the esc to save power. This may not exist if we're using the flywheel
    // control FET to control a high current pusher
    // We support a maximum of 4 motors; add that max to nanopb to simplify the implementation
    repeated MotorConfig motorConfig = 5 [ (nanopb).max_count = 4 ];
}

message ClosedLoopFlywheelParams
{
    int32 idleRpm = 1;
    int32 idleTime_ms = 2;

    // TODO(Issue #21) Figure out and docment the spindown logic
    int32 spindownSpeed = 3;
}

message OpenLoopFlywheelParams
{
    int32 idleDutyCycle = 1;
    int32 idleTime_ms = 2;

    // The minimum amount of time that the flywheels must have revved from standstill before the pusher can be triggered
    int32 minimumRevTime_ms = 3;
    // The minimum amount of time that the flywheels must have revved from idling before the pusher can be triggered
    // This is optional; if idling is not used, we will fall back to minimumRevTime_ms
    int32 minimumIdleRevTime_ms = 4;

    // Does not apply to binary brushed setups since we have no way to control the speed
    // Can we get some sort of unit on this?
    int32 spindownSpeed = 5;
}

/*************************************************/
/************** Enums and sub-types **************/
/*************************************************/

enum MotorControlMethod {
    MOTOR_CONTROL_INVALID = 0;
    ESC_DSHOT = 1;
    ESC_PWM = 2;
    BRUSHED_PWM = 3;
    BRUSHED_BINARY = 4;
}

enum TelemMethod {
    NO_TELEMETRY = 0;
    BIDIRECTIONAL_DSHOT = 1;
    SERIAL = 2;
    TACHOMETER = 3;
}

// The various dshot modes may not be supported by all escs
// Selecting DSHOT_OFF when config specifies DSHOT will throw an error
// Conversely, values selected here when a non Dshot control method is selected will be ignored
enum DshotModes {
    DSHOT_OFF = 0;
    DSHOT_150 = 1;
    DSHOT_300 = 2;
    DSHOT_600 = 3;
    DSHOT_1200 = 4;
}

message MotorConfig
{
    int32 motorKv = 1;
    int32 idleRPM = 2;
    // The percent of the rev rpm to hit before we start firing
    int32 firingThresholdPercentage = 3;
}
